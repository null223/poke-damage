{"version":3,"sources":["components/pages/Init.js","components/pages/Start.js","components/pages/Battle.js","components/Base.js","App.js","serviceWorker.js","index.js"],"names":["Init","update","className","StyledButton","onClick","styled","div","Start","status","setStatus","useInput","initialValue","useState","value","set","onChange","e","target","name","hp","onSubmit","preventDefault","_name","_status","type","placeholder","step","min","children","Battle","initStatus","DamageBackButton","StyledDamageBackButton","damage","DamageButton","StyledDamageButton","pre_damage","button","initialState","is_dead","StyledWrapper","Base","state","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9c3fe9a.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Init = ({update}) => (\n  <div className=\"row\">\n    <h2>ポケカ　ダメージカウンター</h2>\n    <StyledButton onClick={() => update(\"start\")}>\n      <div />\n      <div />\n    </StyledButton>\n  </div>\n);\n\nexport default Init;\n\nconst StyledButton = styled.div`\n  width: 100%;\n  position: relative;\n  &::before {\n    position: relative;\n    content: '';\n    display: block;\n    padding-top: 100%;\n    background-color: #ececec;\n    border-radius: 8px;\n  }\n  & div {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 80%;\n    height: 2rem;\n    border-radius: 1rem;\n    transform: translate(-50%, -50%);\n    background-color: #fff;\n    &:first-of-type {\n      transform: translate(-50%, -50%) rotate(90deg);\n    }\n  }\n`;","import React, { useState } from 'react';\n\n\nconst Start = ({status, setStatus, update}) => {\n\n  // const [state, updateState] = useState({name: status.name, hp: status.hp});\n  const useInput = initialValue => {\n    const [value, set] = useState(initialValue);\n    return { value, onChange: e => set(e.target.value) };\n  };\n  const name = useInput(\"\");\n  const hp = useInput(\"\");\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const _name = name.value ? name.value : \"ポケモン\"\n    setStatus(_status => ({..._status, name: _name, hp: hp.value}));\n    if (!(hp.value < 10)) {\n      update(\"battle\");\n    }\n  };\n\n  return (\n    <form className=\"row\" onSubmit={onSubmit}>\n      <h3 className=\"col-12\">名前とHPを入力してね</h3>\n      <input\n        name=\"name\" type=\"text\" {...name}\n        className=\"col-sm-6 mb-3\" placeholder=\"ポケモン\" />\n      <input\n        name=\"hp\" type=\"number\" {...hp}\n        step=\"10\" min=\"10\" className=\"col-sm-6 mb-3\" placeholder=\"100\" />\n      <button type=\"submit\" className=\"btn btn-primary col-6 offset-3\" children=\"スタート！\" />\n    </form>\n  );\n};\n\nexport default Start;","import React/*, { useEffect }*/ from 'react';\nimport styled from 'styled-components';\n\n\nconst Battle = ({status, setStatus, initStatus, update}) => {\n  \n  const DamageBackButton = () => {\n    const onClick = () => {\n      if (status.damage != 0)\n        setStatus(_status => ({..._status, damage: _status.damage - 10}));\n    }\n    return (\n      <StyledDamageBackButton onClick={onClick}\n        className=\"btn btn-primary\">\n        +10\n      </StyledDamageBackButton> \n    );\n  };\n\n  const DamageButton = () => {\n    const handleDown = () => {\n      initStatus();\n      update('start');\n    }\n    const onClick = () =>{\n      setStatus(_status => ({..._status, damage: _status.damage + 10}));\n    }\n    if (status.hp <= status.damage) {\n      return <StyledDamageButton onClick={handleDown}\n        className=\"btn btn-dark\">きぜつした！<br />いれかえる</StyledDamageButton>;\n    } else {\n      return <StyledDamageButton onClick={onClick}\n        className=\"btn btn-danger\">-10</StyledDamageButton>;\n    }\n  }\n\n  return (\n    <div className=\"position-relative\">\n      <p>{status.name}</p>\n      <p>HP {status.hp - status.damage - status.pre_damage}/{status.hp}</p>\n      <DamageBackButton />\n      <DamageButton />\n    </div>\n  );\n};\n\nexport default Battle;\n\nconst StyledDamageBackButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;  \n `;\n\nconst StyledDamageButton = styled.button`\n  width: 100%;\n  margin-top: 1.5rem;\n  padding: 3rem;\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Init, Start, Battle } from './pages';\n\nconst initialState = {\n  name: \"\",\n  hp: 0,\n  damage: 0,\n  pre_damage: 0,\n  is_dead: false\n}\n\n\n\nconst Base = () => {\n  const [status, setStatus] = useState(initialState);\n  const [state, update] = useState(\"init\");\n  const initStatus = () => setStatus(initialState);\n\n  return (\n    <StyledWrapper>\n    {state == \"init\" ?\n      <Init update={update} />\n    : state == \"start\" ?\n      <Start\n        status={status}\n        setStatus={setStatus}\n        update={update}\n      />\n    : state == \"battle\" && \n      <Battle\n        status={status}\n        setStatus={setStatus}\n        initStatus={initStatus}\n        update={update} />\n    }\n    </StyledWrapper>\n  )\n};\n\n\n\nconst StyledWrapper = styled.div`\n  width: 100%;\n  padding: 15px 30px;\n  border: 1px solid #666;\n  background-color: #fff;\n  border-radius: 8px;\n`;\n\n\n\nexport default Base;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Base from './components/Base';\n\n\nfunction App() {\n  return (\n    <main>\n      <StyledWrapper>\n        <Base />\n      </StyledWrapper>\n    </main>\n  );\n}\n\nconst StyledWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background-color: #ddd;\n  padding: 10px;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}